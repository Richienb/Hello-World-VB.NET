<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAEgAAAC8AAABHAAAAVAAAAFQAAABHAAAALwAAABIAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAHAAAANQAAAIcAAADLAAAA6gAAAPYAAAD8AAAA/AAAAPYAAADqAAAAygAAAIUAAAA0AAAABwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAALQAAAJ4AAADrAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOoAAACdAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAFAAAADYAAAA/wAAAP8AAAD5AAAA1gAAAKUAAAB7AAAAYwAAAGMAAAB8AAAApQAA
        ANYAAAD5AAAA/wAAAP8AAADXAAAATwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        wB/8AAA//wAA//+AAf//4Af///////////8=
</value>
  </data>
</root>